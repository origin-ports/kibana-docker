#!/usr/bin/env python3
#
# Print the Elastic Stack version for the current branch, as defined in
# the 'version.json' file.
#
# The branch can also be forced by setting the GIT_BRANCH environment variable.

import json
import re
from subprocess import run, PIPE
from os import environ

version_map = json.load(open('version.json'))


def shell(cmd):
    return run(cmd, stdout=PIPE).stdout.decode().strip()


def find_version_by_git_branch():
    # Some environments, particularly Jenkins, set $GIT_BRANCH. Honour it.
    try:
        branch = environ['GIT_BRANCH'].lstrip('origin/')
    # If $GIT_BRANCH isn't set, ask 'git' what branch we are on.
    except KeyError:
        branch = shell(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])

    # Running "git rev-parse --abbrev-ref HEAD" will resolve to a branch name if
    # we are on a branch, but it's possible that we are in a "detached head state".
    # If that's the case, our rev-parse attempt will simply resolve back to "HEAD".
    if branch == 'HEAD':
        # We will have to deduce the branch from which we were detached.
        match = re.search(r'HEAD detached at [^/]+/([\w.]*)', shell(['git', 'branch']))
        branch = match.group(1)
        # eg. "(HEAD detached at origin/master)"
        #                               ^^^^^^

    try:
        return version_map['branches'][branch]
    except KeyError:
        # Unknown branch, assume it is a fork of master.
        return version_map['branches']['master']


if __name__ == '__main__':
    if 'ELASTIC_VERSION' in environ:
        # Then the user has forced the version. Do as they say!
        print(environ['ELASTIC_VERSION'])
    else:
        print(find_version_by_git_branch())
